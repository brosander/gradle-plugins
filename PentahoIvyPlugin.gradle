class PentahoIvyPlugin implements Plugin<Project> {
  def buildProperties 
  def confMappingProperty = 'pentaho-ivy-conf-mapping'
  def globalToLocalMapProperty = 'pentaho-global-to-local-mapping'
  def project

  //Will replace property references with their values in build.properties or assembly.properties for use at build time
  def propertyHelper = org.apache.tools.ant.PropertyHelper.getPropertyHelper(new org.apache.tools.ant.Project())

  //Will replace property references with a string that will resolve them for use in build.gradle
  def printPropertyHelper = org.apache.tools.ant.PropertyHelper.getPropertyHelper(new org.apache.tools.ant.Project())
  def engine = new groovy.text.SimpleTemplateEngine()

  def getIvyConfMapping(String ivyConf) {
    if (ivyConf.contains('->')) {
      ivyConf = ivyConf.split('->')[0]
    }
    def result = project.getProperty(confMappingProperty).get(ivyConf)
    if (result == null) {
      return ivyConf
    }
    return result
  }

  def registerDependencies(String ivyLocation, Closure registerAction) {
    if (file(ivyLocation).exists()) {
      def parsedIvy = new XmlParser().parse(ivyLocation)
      parsedIvy.dependencies.each { dependencies ->
        def defaultConf = getIvyConfMapping((dependencies.@defaultconf).split('->')[0])
        dependencies.dependency.each { dependency ->
          def dependencyNotation = dependency.@org + ':' + dependency.@name + ':' + dependency.@rev 
          def isTransitive = true
          if (dependency.@transitive != null && !'true'.equalsIgnoreCase(dependency.@transitive)) {
            isTransitive = false
          }
          def changing = false
          if (dependency.@changing != null && 'true'.equalsIgnoreCase(dependency.@changing)) {
            changing = true
          }
          if (dependency.@conf != null) {
            registerAction(dependency.@conf, dependencyNotation, isTransitive, changing)
          } else {
            registerAction(defaultConf, dependencyNotation, isTransitive, changing)
          }
        }
      }
    }
  }

  void apply(Project project) {
    this.project = project
    def buildProperties = new Properties()
    def buildFile = new File(project.projectDir.absolutePath + '/build.properties')
    if (!buildFile.exists()) {
      buildFile = new File(project.projectDir.absolutePath + '/assembly.properties')
    } 
    if (buildFile.exists()) {
      println "Project $project.name Loaded build file $buildFile.absolutePath"
    }
    if (buildFile.exists()) {
      buildProperties.load(new FileReader(buildFile))
    }
    this.buildProperties = buildProperties
    buildProperties.each{k, v -> propertyHelper.setProperty(null, k, v, true)}
    buildProperties.each{k, v -> printPropertyHelper.setProperty(null, k, '${property(\'' + k + '\')}', true)}

    if (!project.hasProperty(confMappingProperty)) {
      project.ext[confMappingProperty] = new HashMap()
    }
    def confMapping = project.getProperty(confMappingProperty)
    if (!confMapping.containsKey('default')) {
      confMapping.put('default', 'compile')
    }
    if (!confMapping.containsKey('test')) {
      confMapping.put('test', 'testCompile')
    }

    if (!project.hasProperty(globalToLocalMapProperty)) {
      project.ext[globalToLocalMapProperty] = new HashMap()
    }
    def globalToLocalMap = project.getProperty(globalToLocalMapProperty)
    
    project.plugins.apply(org.gradle.api.plugins.JavaPlugin)

    project.repositories {
      ivy {
        url "http://repo.pentaho.org/artifactory/repo/"
        layout  "pattern", {
          ivy "[organisation]/[module]/[revision]/[module]-[revision].ivy.xml"
          artifact "[organisation]/[module]/[revision]/[module]-[revision].jar"
          m2compatible = true
        }
      }
      maven {
        url 'http://repo.pentaho.org/artifactory/repo'
      }
      mavenCentral()
    }

    buildProperties.each{k, v -> 
      if (!project.hasProperty(k)) {
        project.ext[k] = v
      }
    }

    def ivyLocation = project.projectDir.absolutePath + "/ivy.xml"

    project.task('parse-ivy') << {
      registerDependencies(ivyLocation, {conf, notation, isTransitive, isChanging -> project.getDependencies().add(getIvyConfMapping(conf), propertyHelper.replaceProperties(notation), {transitive = isTransitive; changing = isChanging})})
    }

    project.compileJava.dependsOn(project.tasks['parse-ivy'])

    project.task('print-ivy') << {
      registerDependencies(ivyLocation, {conf, notation, isTransitive, isChanging -> println getIvyConfMapping(conf) + ' "' + printPropertyHelper.replaceProperties(notation) + "\", {transitive = $isTransitive; changing = $isChanging}"})
    }
  }
}

project.ext['pentaho-ivy'] = PentahoIvyPlugin.class
